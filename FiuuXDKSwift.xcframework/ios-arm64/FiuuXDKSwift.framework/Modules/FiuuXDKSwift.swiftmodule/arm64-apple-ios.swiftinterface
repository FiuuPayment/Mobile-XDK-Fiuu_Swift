// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios16.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name FiuuXDKSwift
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreTelephony
import Foundation
import PassKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct ApplePaymentData : Swift.Codable {
  public var empty: FiuuXDKSwift.ApplePaymentData {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias PaymentCompletionHandler = (Swift.Bool) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class APManager : ObjectiveC.NSObject {
  public static let shared: FiuuXDKSwift.APManager
  final public var resultPayment: Swift.String
  final public var paymentData: FiuuXDKSwift.ApplePaymentData?
  final public func startPayment(completion: @escaping FiuuXDKSwift.PaymentCompletionHandler)
  @objc deinit
}
extension FiuuXDKSwift.APManager : PassKit.PKPaymentAuthorizationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func paymentAuthorizationController(_ controller: PassKit.PKPaymentAuthorizationController, didAuthorizePayment payment: PassKit.PKPayment, handler completion: @escaping (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc final public func paymentAuthorizationControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class FiuuXDKController : UIKit.UIViewController {
  public typealias CompletionHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public init(with details: [Swift.String : Any])
  @_Concurrency.MainActor @preconcurrency @objc override final public func loadView()
  @_Concurrency.MainActor @preconcurrency final public func startXDK(completion: @escaping FiuuXDKSwift.FiuuXDKController.CompletionHandler, onFinishDeepLink: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension FiuuXDKSwift.FiuuXDKController : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping @_Concurrency.MainActor (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping @_Concurrency.MainActor (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
